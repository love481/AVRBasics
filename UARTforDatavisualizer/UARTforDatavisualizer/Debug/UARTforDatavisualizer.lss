
UARTforDatavisualizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dd  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000602  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a7  00000000  00000000  00000ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  74:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12uart_receivev>:
unsigned char b,c;
//Function for character receiving on Rx pin

unsigned char uart_receive ()
{
	while((UCSRA&(1<<RXC)) == 0);
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <_Z12uart_receivev>
	// wait untill 8-bit of a character receive
	return UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <_Z13uart_transmith>:

//Functions transmit data

void uart_transmit (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <_Z13uart_transmith>
	// wait for the register to free from data
	UDR = data;
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <main>:

//Main function

int main(void)
{
  DDRA|=(1<<PINA0);
  8c:	d0 9a       	sbi	0x1a, 0	; 26
	//UART initialization
	UBRRH=(uint8_t)(sbr>>8);
  8e:	10 bc       	out	0x20, r1	; 32
	UBRRL=(uint8_t)sbr; // To set the Buad rate to 9600.. get value through above formula
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
  94:	88 e9       	ldi	r24, 0x98	; 152
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<UCSZ1) | (1<<UCSZ0)|(1<<USBS) ;
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	80 bd       	out	0x20, r24	; 32

	while(1){
		a=uart_receive(); // MC will wait here infinitly to get a 8-bit character
       if(a=='1')
	   {  PORTA^=(1<<PINA0);
  9c:	c1 e0       	ldi	r28, 0x01	; 1
	UBRRL=(uint8_t)sbr; // To set the Buad rate to 9600.. get value through above formula
	UCSRB=(1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
	UCSRC=(1<<UCSZ1) | (1<<UCSZ0)|(1<<USBS) ;

	while(1){
		a=uart_receive(); // MC will wait here infinitly to get a 8-bit character
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12uart_receivev>
  a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
       if(a=='1')
  a6:	81 33       	cpi	r24, 0x31	; 49
  a8:	61 f4       	brne	.+24     	; 0xc2 <main+0x36>
	   {  PORTA^=(1<<PINA0);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8c 27       	eor	r24, r28
  ae:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e3       	ldi	r18, 0x3F	; 63
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x2a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x34>
  c0:	00 00       	nop
		   _delay_ms(1000);
		   
	   }
	   uart_transmit('1');
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	0e 94 42 00 	call	0x84	; 0x84 <_Z13uart_transmith>
  c8:	2f e9       	ldi	r18, 0x9F	; 159
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x42>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x4c>
  d8:	00 00       	nop
  da:	e1 cf       	rjmp	.-62     	; 0x9e <main+0x12>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
