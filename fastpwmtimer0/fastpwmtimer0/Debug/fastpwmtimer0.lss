
fastpwmtimer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066d  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000598  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_11>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  7a:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z9timerflagh>:
   OCR0=(pwm*255)/100;
	sei();
}
void timerflag(uint8_t pwmvalue)
{
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  82:	99 e6       	ldi	r25, 0x69	; 105
  84:	93 bf       	out	0x33, r25	; 51
	  OCR0=(pwmvalue*255)/100;
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	82 9f       	mul	r24, r18
  8a:	c0 01       	movw	r24, r0
  8c:	11 24       	eor	r1, r1
  8e:	64 e6       	ldi	r22, 0x64	; 100
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	0e 94 7f 00 	call	0xfe	; 0xfe <__divmodhi4>
  96:	96 2f       	mov	r25, r22
  98:	6c bf       	out	0x3c, r22	; 60
	  while(1)
	  {  while((TIFR&0x01)==0);//wait until timer overflow occurs and resets TCNT0
  9a:	08 b6       	in	r0, 0x38	; 56
  9c:	00 fe       	sbrs	r0, 0
  9e:	fd cf       	rjmp	.-6      	; 0x9a <_Z9timerflagh+0x18>
		    OCR0=(pwmvalue*255)/100;
  a0:	9c bf       	out	0x3c, r25	; 60
		  TIFR|=0x01;		    //clear timer overflow flag
  a2:	88 b7       	in	r24, 0x38	; 56
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	88 bf       	out	0x38, r24	; 56
}
void timerflag(uint8_t pwmvalue)
{
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
	  OCR0=(pwmvalue*255)/100;
	  while(1)
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <_Z9timerflagh+0x18>

000000aa <main>:
		  TIFR|=0x01;		    //clear timer overflow flag
	  }
}
int main(void)
{  
	DDRB|=(1<<PB3);
  aa:	bb 9a       	sbi	0x17, 3	; 23
	timerflag(dutycycle);
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  b0:	0e 94 41 00 	call	0x82	; 0x82 <_Z9timerflagh>

000000b4 <__vector_11>:
    while (1) 
    { 
    }
}
ISR(TIMER0_OVF_vect)///interrupt service routine
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	5f 93       	push	r21
  c2:	6f 93       	push	r22
  c4:	7f 93       	push	r23
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	af 93       	push	r26
  cc:	bf 93       	push	r27
	 OCR0=(dutycycle*255)/100;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	82 9f       	mul	r24, r18
  d6:	c0 01       	movw	r24, r0
  d8:	11 24       	eor	r1, r1
  da:	64 e6       	ldi	r22, 0x64	; 100
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	0e 94 7f 00 	call	0xfe	; 0xfe <__divmodhi4>
  e2:	6c bf       	out	0x3c, r22	; 60
}
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	7f 91       	pop	r23
  ee:	6f 91       	pop	r22
  f0:	5f 91       	pop	r21
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__divmodhi4>:
  fe:	97 fb       	bst	r25, 7
 100:	07 2e       	mov	r0, r23
 102:	16 f4       	brtc	.+4      	; 0x108 <__divmodhi4+0xa>
 104:	00 94       	com	r0
 106:	07 d0       	rcall	.+14     	; 0x116 <__divmodhi4_neg1>
 108:	77 fd       	sbrc	r23, 7
 10a:	09 d0       	rcall	.+18     	; 0x11e <__divmodhi4_neg2>
 10c:	0e 94 93 00 	call	0x126	; 0x126 <__udivmodhi4>
 110:	07 fc       	sbrc	r0, 7
 112:	05 d0       	rcall	.+10     	; 0x11e <__divmodhi4_neg2>
 114:	3e f4       	brtc	.+14     	; 0x124 <__divmodhi4_exit>

00000116 <__divmodhi4_neg1>:
 116:	90 95       	com	r25
 118:	81 95       	neg	r24
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	08 95       	ret

0000011e <__divmodhi4_neg2>:
 11e:	70 95       	com	r23
 120:	61 95       	neg	r22
 122:	7f 4f       	sbci	r23, 0xFF	; 255

00000124 <__divmodhi4_exit>:
 124:	08 95       	ret

00000126 <__udivmodhi4>:
 126:	aa 1b       	sub	r26, r26
 128:	bb 1b       	sub	r27, r27
 12a:	51 e1       	ldi	r21, 0x11	; 17
 12c:	07 c0       	rjmp	.+14     	; 0x13c <__udivmodhi4_ep>

0000012e <__udivmodhi4_loop>:
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	a6 17       	cp	r26, r22
 134:	b7 07       	cpc	r27, r23
 136:	10 f0       	brcs	.+4      	; 0x13c <__udivmodhi4_ep>
 138:	a6 1b       	sub	r26, r22
 13a:	b7 0b       	sbc	r27, r23

0000013c <__udivmodhi4_ep>:
 13c:	88 1f       	adc	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	a9 f7       	brne	.-22     	; 0x12e <__udivmodhi4_loop>
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	bc 01       	movw	r22, r24
 14a:	cd 01       	movw	r24, r26
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
